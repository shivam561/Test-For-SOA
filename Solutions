// firstly I made a number type field on Account named Number_of_contacts__c and then write a trigger on contact .
trigger numberOfContactOnAccount on Contact (After insert, After delete, After undelete, After Update) {
    Set<Id> parentIdsSet = new Set<Id>();
    List<Account> accountListToUpdate = new List<Account>();
    IF(Trigger.IsAfter){
        IF(Trigger.IsInsert || Trigger.IsUndelete  || Trigger.isUpdate){
            FOR(Contact c : Trigger.new){
                if(c.AccountId!=null){   
                   parentIdsSet.add(c.AccountId);
                   If(Trigger.isUpdate){
                       if(Trigger.oldMap.get(c.Id).AccountId != c.AccountId){
                          parentIdsSet.add(Trigger.oldMap.get(c.Id).AccountId);
                       }
                    }
                }
            }
        }
        IF(Trigger.IsDelete){
            FOR(Contact c : Trigger.Old){
                if(c.AccountId!=null){   
                   parentIdsSet.add(c.AccountId); 
                }
            }
        }
    }
    System.debug('####shivam = '+parentIdsSet);
    List<Account> accountList = new List<Account>([Select id ,Name, Number_of_Contacts__c, (Select id, Name From Contacts) from Account Where id in:parentIdsSet]);
    FOR(Account acc : accountList){
        List<Contact> contactList = acc.Contacts;
        acc.Number_of_Contacts__c = contactList.size();
        accountListToUpdate.add(acc);
    }
    try{
        update accountListToUpdate;
    }catch(System.Exception e){
        
    }
}

// created a lightning component, its controller and apex controller to print the recently created 10 accounts.
// testApp.app
<aura:application extends="force:slds">
    <c:ComponentToDisplayRecentAccounts />
</aura:application>
//lightning Component
<aura:component controller="DisplayAccount_CC" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" access="global" >
    <aura:attribute name="acountList" Type="Account[]" access="public" />
    <aura:attribute name="isAccountList" Type="boolean" access="public" />
    <lightning:button variant="brand" label="Print Recent Accounts" title="Brand action" onclick="{! c.handleClick }" />
    <aura:if isTrue="{!v.isAccountList}">
        <aura:iteration items="{!v.acountList}" var="item">
            <li>{!item.Name}</li>
        </aura:iteration>
    </aura:if>
</aura:component>
//component's controller.js
({
    handleClick : function(component, event, helper) {
        var action = component.get('c.fetchAccount');
        action.setCallback(this, function(a){
            var state = a.getState();
            if (state == "SUCCESS"){
                component.set('v.isAccountList',true);
                var response = JSON.parse(a.getReturnValue());
                component.set('v.acountList',response);
            }
        });
        $A.enqueueAction(action);
    }
})
// Apex controller
public class DisplayAccount_CC {
    @AuraEnabled
    public static String fetchAccount(){
        try{
            List<Account> acc = [SELECT id,Name From Account ORDER BY CreatedDate DESC LIMIT 10];
            return JSON.serialize(acc);
            
        }catch(Exception ex){
            return ex.getMessage(); 
        }        
    }
    
}
// Q3 HTTPCallOut
public class HttpCalloutTest {
    public static HttpResponse makeGet() {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://postman-echo.com/get?foo1=bar1&foo2=bar2');
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        if (response.getStatusCode() == 200) {
            system.debug('Shivam output'+response.getBody());
        }
        return response;
    }
}
